{"version":3,"file":"miniapp-spore.js","sources":["../src/event.js","../src/core.js","../src/diff.js","../src/index.js","../src/store.plugin.js","../src/props.plugin.js"],"sourcesContent":["function Event(all) {\r\n\tall = all || Object.create(null);\r\n\r\n\tconst e = {\r\n\t\t/**\r\n\t\t * 注册\r\n\t\t *\r\n\t\t * @param  {String} type\t事件名 `\"*\"` 代表全部\r\n\t\t * @param  {Function} handler 方法\r\n\t\t */\r\n\t\ton: function on(type, handler) {\r\n\t\t\t(all[type] || (all[type] = [])).push(handler);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 移出\r\n\t\t *\r\n\t\t * @param  {String} type\t事件名 `\"*\"` 代表全部\r\n\t\t * @param  {Function} handler 移出的方法\r\n\t\t */\r\n\t\toff: function off(type, handler) {\r\n\t\t\tif (all[type]) {\r\n\t\t\t\tif(arguments.length == 1){\r\n\t\t\t\t\tall[type] = []\r\n\t\t\t\t}else{\r\n\t\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 触发\r\n\t\t *\r\n\t\t * @param {String} type  触发事件名\r\n\t\t * @param {Any} [args]  额外进入方法的参数\r\n\t\t * @param {object} [context]  this指向的上下文\r\n\t\t */\r\n\t\temit: function emit(type, args=[], context) {\r\n\t\t\tlet tps = (all[type] || []).slice().map(function (handler) { return handler.apply(context, args); });\r\n\t\t\tlet aps = (all['*'] || []).slice().map(function (handler) { return handler.apply(context, [...args, type]); });\r\n\t\t\treturn [...tps, ...aps];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 同步触发\r\n\t\t *\r\n\t\t * @param {String} type  触发事件名\r\n\t\t * @param {Any} [args]  额外进入方法的参数\r\n\t\t * @param {object} [context]  this指向的上下文\r\n\t\t */\r\n\t\tasyncEmit: function asyncEmit(type, args=[], context) {\r\n\t\t\treturn Promise.all(e.emit(type, args, context));\r\n\t\t},\r\n\t};\r\n\r\n\treturn e;\r\n}\r\n\r\nexport default Event;","\r\nimport Event from \"./event\";\r\n\r\nlet spore = Event({});\r\n\r\n//polyfill\r\nif (!Object.entries){\r\n  Object.entries = function (obj) {\r\n    var ownProps = Object.keys(obj),\r\n      i = ownProps.length,\r\n      resArray = new Array(i); // preallocate the Array\r\n    while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];\r\n\r\n    return resArray;\r\n  };\r\n}\r\n\r\n// 类型检测\r\nconst type = (t) => {\r\n    return {}.toString.call(t).slice(8, -1).toLowerCase();\r\n};\r\n\r\n// 获取当前页面（注意某些情况可能为null）\r\nlet getPage = ()=> {\r\n    let curPages = getCurrentPages();\r\n    return curPages[curPages.length - 1];\r\n}\r\n// 是否为页面\r\nlet isPage = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return \"$viewId\" in instance && \"route\" in instance;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n// 是否为组件\r\nlet isComponent = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return (\r\n            \"is\" in instance &&\r\n            \"$page\" in instance &&\r\n            \"props\" in instance\r\n        );\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n// 是否为App\r\nlet isApp = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return instance == getApp();\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nObject.assign(spore, {\r\n  type,\r\n  isPage,\r\n  isComponent,\r\n  isApp,\r\n  getPage,\r\n  Event\r\n})\r\n\r\n// 生命周期\r\nlet lifeCycles = {\r\n  App:['onLaunch','onShow','onHide','onError','onShareAppMessage'],\r\n  Page:['onLoad','onShow','onBack', 'onReady', 'onHide', 'onUnload', 'onTitleClick', 'onPullDownRefresh', 'onReachBottom', 'onShareAppMessage'],\r\n  Component:['onInit', 'deriveDataFromProps', 'didMount', 'didUpdate', 'didUnmount']\r\n};\r\n\r\n// 事件监听\r\nlet listen = function(type, config){\r\n  spore.emit(`${type}.init`, [config])\r\n  lifeCycles[type].forEach(function(lifeCycle){\r\n    let fn = config[lifeCycle] || function(){};\r\n\r\n    // lifeCycle AOP\r\n    config[lifeCycle] = async function(){\r\n      await spore.asyncEmit(`${type}.${lifeCycle}:before`, arguments, this)\r\n      await fn.apply(this, arguments);\r\n      await spore.asyncEmit(`${type}.${lifeCycle}:after`, arguments, this)\r\n    }\r\n  })\r\n  spore.emit(`${type}.inited`, [config])\r\n};\r\n\r\n// 页面组件实例存入 page._coms\r\nspore.on('Component.didMount:before', function(){\r\n  this.$page._coms = this.$page._coms || new Set();\r\n  this.$page._coms.add(this);\r\n})\r\nspore.on('Component.didUnmount:before', function(){\r\n  this.$page._coms = this.$page._coms || new Set();\r\n  this.$page._coms.delete(this);\r\n})\r\n// 已加载\r\nspore.on('Page.onLoad:before', function(){\r\n  setTimeout(() => {\r\n    this._loaded = true;\r\n  }, 10);\r\n})\r\n// 页面返回生命周期\r\nspore.on('Page.onShow:after', function(){\r\n  if(this._loaded){\r\n    this.onBack();\r\n  }\r\n})\r\n\r\n\r\n// Hooks\r\nlet _App = App;\r\nlet _Page = Page;\r\nlet _Component = Component;\r\nApp = function(config){\r\n  listen('App', config);\r\n  return _App(config);\r\n};\r\nApp._App = _App;\r\nApp.isApp = isApp;\r\nPage = function(config){\r\n  listen('Page', config);\r\n  return _Page(config);\r\n};\r\nPage._Page = _Page;\r\nPage.isPage = isPage;\r\nComponent = function(config){\r\n  listen('Component', config);\r\n  return _Component(config);\r\n};\r\nComponent._Component = _Component;\r\nComponent.isComponent = isComponent;\r\n\r\n\r\n\r\n// 插件install\r\nlet plugins = new Set();\r\n\r\nspore.use = function(plugin, options){\r\n  plugin.options = options;\r\n  plugins.add(plugin)\r\n  const { install } = plugin.bind(spore)(spore, options)\r\n  install()\r\n};\r\nspore.plugins = plugins;\r\nspore.lifeCycles = lifeCycles;\r\n\r\n\r\n\r\n\r\nexport default spore;","const ARRAYTYPE = '[object Array]'\r\nconst OBJECTTYPE = '[object Object]'\r\nconst FUNCTIONTYPE = '[object Function]'\r\n\r\n//thanks:\r\n//https://github.com/yisar/fard/blob/master/packages/fard/index.js\r\n//https://github.com/linjc/dd-store/blob/master/src/create.js\r\n//https://github.com/Tencent/westore/blob/master/packages/westore/utils/diff.js\r\n\r\nfunction getType(obj) {\r\n  return Object.prototype.toString.call(obj)\r\n}\r\n\r\nfunction deepCopy(data) {\r\n  const type = getType(data)\r\n  if (type === OBJECTTYPE) {\r\n    const obj = {}\r\n    Object.keys(data).forEach(key => obj[key] = deepCopy(data[key]))\r\n    return obj\r\n  }\r\n  if (type === ARRAYTYPE) {\r\n    const arr = []\r\n    data.forEach((item, index) => arr[index] = deepCopy(item))\r\n    return arr\r\n  }\r\n  return data\r\n}\r\n\r\n//JSON.parse(JSON.stringify(current))//\r\n\r\nexport default function diff(current, pre) {\r\n    current = deepCopy(current)\r\n    const result = {}\r\n    syncKeys(current, pre)\r\n    _diff(current, pre, '', result)\r\n    return result\r\n}\r\n\r\ndiff.deepCopy = deepCopy;\r\n\r\nfunction syncKeys(current, pre) {\r\n    if (current === pre) return\r\n    const rootCurrentType = type(current)\r\n    const rootPreType = type(pre)\r\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\r\n        //if(Object.keys(current).length >= Object.keys(pre).length){\r\n            for (let key in pre) {\r\n                const currentValue = current[key]\r\n                if (currentValue === undefined) {\r\n                    current[key] = null\r\n                } else {\r\n                    syncKeys(currentValue, pre[key])\r\n                }\r\n            }\r\n        //}\r\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\r\n        if (current.length >= pre.length) {\r\n            pre.forEach((item, index) => {\r\n                syncKeys(current[index], item)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction _diff(current, pre, path, result) {\r\n    if (current === pre) return\r\n    const rootCurrentType = type(current)\r\n    const rootPreType = type(pre)\r\n    if (rootCurrentType == OBJECTTYPE) {\r\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\r\n            setResult(result, path, current)\r\n        } else {\r\n            for (let key in current) {\r\n                const currentValue = current[key]\r\n                const preValue = pre[key]\r\n                const currentType = type(currentValue)\r\n                const preType = type(preValue)\r\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\r\n                    if (currentValue != pre[key]) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    }\r\n                } else if (currentType == ARRAYTYPE) {\r\n                    if (preType != ARRAYTYPE) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    } else {\r\n                        if (currentValue.length < preValue.length) {\r\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                        } else {\r\n                            currentValue.forEach((item, index) => {\r\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result)\r\n                            })\r\n                        }\r\n                    }\r\n                } else if (currentType == OBJECTTYPE) {\r\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    } else {\r\n                        for (let subKey in currentValue) {\r\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else if (rootCurrentType == ARRAYTYPE) {\r\n        if (rootPreType != ARRAYTYPE) {\r\n            setResult(result, path, current)\r\n        } else {\r\n            if (current.length < pre.length) {\r\n                setResult(result, path, current)\r\n            } else {\r\n                current.forEach((item, index) => {\r\n                    _diff(item, pre[index], path + '[' + index + ']', result)\r\n                })\r\n            }\r\n        }\r\n    } else {\r\n        setResult(result, path, current)\r\n    }\r\n}\r\n\r\nfunction setResult(result, k, v) {\r\n    if (type(v) != FUNCTIONTYPE) {\r\n        result[k] = v\r\n    }\r\n}\r\n\r\nfunction type(obj) {\r\n    return Object.prototype.toString.call(obj)\r\n}","import spore from \"./core\";\r\nimport storePlugin from \"./store.plugin\";\r\nimport propsPlugin from \"./props.plugin\";\r\n\r\nspore.use(storePlugin);\r\n\r\nspore.use(propsPlugin);\r\n\r\n\r\nexport default spore;","import diff from \"./diff\";\r\n\r\n\r\n\r\n\r\nexport default function(spore, options){\r\n\r\n\r\n// 深度复制\r\nconst deepCopy = diff.deepCopy;\r\n\r\nconst { Event, type, isComponent, isPage } = spore;\r\n\r\n// 去除右侧方括号]\r\nconst trimRightBracket = k=>k.replace(/\\]$/g,'');\r\n\r\n\r\n\r\n// 路径设对象值\r\nconst setByPath = function (data, path, value) {\r\n    let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n    if (path && p.length > 1) {\r\n        let k = trimRightBracket(p.shift());\r\n        data = data[k] || (data[k] = p[0] !== trimRightBracket(p[0]) ? [] : {});\r\n        return setByPath(data, p, value);\r\n    } else {\r\n        data[trimRightBracket(p[0])] = value;\r\n        return data;\r\n    }\r\n};\r\n// 路径取对象值\r\nconst getByPath = function (data, path) {\r\n  let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n  if (path && p.length) {\r\n      let k = trimRightBracket(p.shift());\r\n      if (typeof data != \"object\" || !(k in data)) {\r\n          return;\r\n      }\r\n      return getByPath(data[k], p);\r\n  } else {\r\n      return data;\r\n  }\r\n};\r\n// 路径定义对象值\r\nconst defByPath = function (data, path, define={}) {\r\n    let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n    let key, obj;\r\n\r\n    if(p.length>1){\r\n        key = p.splice(-1)[0];\r\n        obj = getByPath(data, p);\r\n    }else{\r\n        key = p[0]\r\n        obj = data;\r\n    }\r\n    key = trimRightBracket(key);\r\n\r\n    if(typeof obj == 'object'){\r\n        return Object.defineProperty(obj, key, define);\r\n    }\r\n};\r\n\r\n\r\n// 全局存储对象列表\r\nconst storesList = new Set();\r\n\r\n// 存储对象\r\nclass Store{\r\n  constructor(namespace='$store', data = {}, options = {}){\r\n    //内部存储的state\r\n    this._defData = data;\r\n\r\n    Object.assign(this, Event(this._events = {}));\r\n\r\n    this.options = Object.assign({diff:false}, options);\r\n    this.namespace = namespace;\r\n\r\n    this._setComputed();\r\n\r\n    //对外暴露的data\r\n    this._data = deepCopy(this._defData);\r\n\r\n\r\n    // 相同命名空间要报错\r\n    if(!Array.from(storesList).find(store=>store.namespace == namespace)){\r\n\r\n      //加入列表方便后续管理\r\n      storesList.add(this);\r\n\r\n    }else{\r\n      throw new Error(`不能同时使用同一个命名空间:${namespace}`)\r\n    }\r\n  }\r\n  // 不要直接访问 _data _defData 字段\r\n  get data(){\r\n    return this._data;\r\n  }\r\n  //设置数据\r\n  setData(update, callback){\r\n    if(type(update) != 'object'){\r\n        return\r\n    }\r\n\r\n    Object.entries(update).map(record=>{\r\n        setByPath(this._defData, record[0], record[1])\r\n    })\r\n\r\n    this._data = deepCopy(this._defData);\r\n\r\n    this.emit('update', [update], this)\r\n    this.update(callback)\r\n  }\r\n  asyncSetData = asyncSetData\r\n\r\n\r\n  //处理计算属性\r\n  _setComputed(){\r\n    let self = this;\r\n    if(this.options.computed){\r\n      Object.entries(this.options.computed).map(computedCof=>{\r\n        const [path, computedFn] = computedCof;\r\n\r\n        if(type(computedFn) == 'function'){\r\n          if(!defByPath(this._defData, path, {\r\n            enumerable: true,\r\n            set() {\r\n              console.warn('计算属性不支持重新赋值')\r\n            },\r\n            get(){\r\n              return computedFn.bind(self._defData)();\r\n            }\r\n          })){\r\n            console.warn(`存储【${this.namespace}】无法定义计算属性${path}，因为在此路径下不是对象类型，无法定义属性。`)\r\n          };\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  //更新、强制更新\r\n  update(callback = ()=>{}){\r\n    let page = spore.getPage();\r\n    let data = this.data;\r\n    if(page){ \r\n\r\n      let update = {\r\n        [this.namespace] : data\r\n      };\r\n\r\n      // 页面diff更新\r\n      if(this.options.diff){\r\n        update = storeDiff(data, this.namespace, page)\r\n      }\r\n      // 页面更新\r\n      let updatePromises = [ asyncSetData.bind(page)(update) ]\r\n\r\n      if(page._coms){\r\n        page._coms.forEach(com=>{\r\n          if(com.$stores && com.$stores.includes(this)){\r\n\r\n            // 组件diff更新\r\n            if(this.options.diff){\r\n              update = storeDiff(data, this.namespace, com)\r\n            }\r\n            // 组件更新\r\n            updatePromises.push( asyncSetData.bind(com)(update) )\r\n          }\r\n        })\r\n      }\r\n\r\n      return Promise.all(updatePromises).then(()=>{ callback(data); return data;});\r\n    }\r\n    return Promise.resolve(data);\r\n  }\r\n  //返回哪些页面/组件在使用\r\n  where(){\r\n    let page = spore.getPage();\r\n    let res = [];\r\n    if(page){\r\n      res.push(page.route);\r\n      if(page._coms){\r\n        page._coms.forEach(com=>{\r\n          if(com.$stores && com.$stores.includes(this)){\r\n            res.push(com.is);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n}\r\n\r\n// 同步setData\r\nlet asyncSetData = function (data) {\r\n    if (isComponent(this) || isPage(this) || isStore(this)) {\r\n        return new Promise((r) => {\r\n            this.setData(data, (data) => {\r\n                r(data);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// store存储与对应页面/组件data下数据对比出差异\r\nlet storeDiff = function (data, namespace, instance){\r\n  \r\n  let diffUpdates = diff(data, instance.data[namespace]);\r\n  \r\n  let namespaceDiffUpdates = {};\r\n\r\n  Object.entries(diffUpdates).forEach(diffUpdate=>{\r\n    namespaceDiffUpdates[`${namespace}.${diffUpdate[0]}`] = diffUpdate[1];\r\n  })\r\n\r\n  return namespaceDiffUpdates;\r\n}\r\n\r\n// 是否为Store类的实例\r\nlet isStore = (instance) =>{\r\n  if(instance && instance instanceof Store){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n\r\n  return {\r\n\r\n    install(){\r\n\r\n      \r\n      Store.isStore = isStore;\r\n\r\n      // 页面返回时数据更新\r\n      spore.on('Page.onBack:before', function(){\r\n        storesList.forEach(store=>{\r\n          store.update()\r\n        })\r\n      })\r\n      // 页面加载时数据更新\r\n      spore.on('Page.onLoad:before', function(){\r\n        storesList.forEach(store=>{\r\n          store.update()\r\n        })\r\n      })\r\n\r\n\r\n      // 组件初始化嵌入数据\r\n      spore.on('Component.init', function(config){\r\n        config.data = config.data || {};\r\n        config.stores = config.stores || [];\r\n        config.methods = config.methods || {};\r\n        config.methods.$stores = config.stores; //$stores需要在组件方法内定义才能取到值\r\n        config.methods.$stores.forEach(store=>{\r\n          config.data[store.namespace] = {...store.data};\r\n        })\r\n\r\n\r\n        config.methods.asyncSetData = asyncSetData;\r\n      })\r\n\r\n      // 页面初始化嵌入数据\r\n      spore.on('Page.init', function(config){\r\n        config.data = config.data || {};\r\n        storesList.forEach(store=>{\r\n          config.data[store.namespace] = {...store.data};\r\n        })\r\n\r\n\r\n        config.asyncSetData = asyncSetData;\r\n      })\r\n\r\n\r\n      Object.assign(spore, {\r\n        Store,\r\n        asyncSetData,\r\n        isStore\r\n      })\r\n\r\n\r\n    }\r\n\r\n  }\r\n}","import diff from \"./diff\";\r\n\r\nexport default function(spore, options){\r\n\r\n /**\r\n * 路径包含匹配\r\n *\r\n * @param  {String} referPath\t参考路径\r\n * @param  {String}  pathRule     匹配规则\r\n * @return {Boolean}  参考路径是否符合在匹配规则下\r\n */\r\nlet isPathContain = (referPath, pathRule = '') => {\r\n  if (pathRule == '*') {\r\n    return true\r\n  }\r\n  let pReg = /[\\.\\[\\]]+/g;\r\n  let bracketsReg = /\\]/g;\r\n  let referPathArr = referPath.replace(bracketsReg, '').split(pReg);\r\n  let pathRuleArr = pathRule.replace(bracketsReg, '').split(pReg);\r\n\r\n  if (pathRuleArr.length > referPathArr.length) {\r\n    return false;\r\n  }\r\n  for (let index = 0; index < pathRuleArr.length; index++) {\r\n    if (pathRuleArr[index] != referPathArr[index]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//是否为空对象\r\nlet isEmptyObject = (obj)=>{\r\n  return !Object.keys(obj || {}).length;\r\n};\r\n\r\n  return {\r\n    install(){\r\n\r\n      spore.lifeCycles.Component.push('didPropsUpdate');\r\n\r\n      // 将配置存入方法的$$config$$，在实例化后可取\r\n      spore.on('Component.init', function(config){\r\n        config.methods.$$config$$ = config;\r\n      });\r\n      \r\n      spore.on('Component.didUpdate:before', function(prevProps, prevData){\r\n\r\n        let diffProps = diff(this.props, prevProps);\r\n         //不相等即diff为空对象时，触发didPropsUpdate 生命周期\r\n        if (!isEmptyObject(diffProps)) {\r\n\r\n          //触发生命周期 didPropsUpdate\r\n          let didPropsUpdate = this.$$config$$.didPropsUpdate || function(){};\r\n          let watchProps = this.$$config$$.watchProps || {};\r\n\r\n          didPropsUpdate.bind(this)(diffProps, prevProps);\r\n\r\n          //配置的监听器\r\n          for (const path in watchProps) {\r\n            if (watchProps.hasOwnProperty(path)) {\r\n              const handler = watchProps[path];\r\n\r\n              //记录匹配\r\n              let match = {};\r\n              Object.keys(diffProps).map((key) => {\r\n                if (isPathContain(key, path)) { //当diff内的变化key包含配置的路径path（并且开头能对上）\r\n                  match[key] = diffProps[key];\r\n                }\r\n              })\r\n              //匹配上路径监听规则时\r\n              if (!isEmptyObject(match)) {\r\n                handler.bind(this)(match, prevProps)\r\n              }\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n}"],"names":["Event","all","Object","create","e","on","type","handler","push","off","arguments","length","splice","indexOf","emit","args","context","tps","slice","map","apply","aps","asyncEmit","Promise","spore","entries","obj","ownProps","keys","i","resArray","Array","t","toString","call","toLowerCase","isPage","instance","isComponent","isApp","getApp","assign","getPage","curPages","getCurrentPages","lifeCycles","App","Page","Component","listen","config","forEach","lifeCycle","fn","this","$page","_coms","Set","add","delete","setTimeout","_this3","_loaded","onBack","_App","_Page","_Component","plugins","use","plugin","options","install","bind","ARRAYTYPE","OBJECTTYPE","deepCopy","data","prototype","getType","key","arr","item","index","diff","current","pre","result","syncKeys","rootCurrentType","rootPreType","currentValue","undefined","_diff","path","setResult","preValue","currentType","preType","subKey","k","v","trimRightBracket","replace","storesList","Store","namespace","asyncSetData","_defData","_events","_setComputed","_data","from","find","store","Error","setData","update","callback","record","setByPath","value","p","isArray","split","shift","_this","self","computed","computedCof","computedFn","define","getByPath","defineProperty","defByPath","_this2","enumerable","set","console","warn","get","page","storeDiff","updatePromises","com","$stores","includes","then","resolve","where","res","route","_this4","is","isStore","r","_this5","diffUpdates","namespaceDiffUpdates","diffUpdate","stores","methods","isEmptyObject","$$config$$","prevProps","prevData","diffProps","props","watchProps","didPropsUpdate","hasOwnProperty","match","referPath","pathRule","pReg","bracketsReg","referPathArr","pathRuleArr","isPathContain"],"mappings":"AAAA,SAASA,EAAMC,GACdA,EAAMA,GAAOC,OAAOC,OAAO,MAE3B,IAAMC,EAAI,CAOTC,GAAI,SAAYC,EAAMC,IACpBN,EAAIK,KAAUL,EAAIK,GAAQ,KAAKE,KAAKD,IAStCE,IAAK,SAAaH,EAAMC,GACnBN,EAAIK,KACgB,GAApBI,UAAUC,OACZV,EAAIK,GAAQ,GAEZL,EAAIK,GAAMM,OAAOX,EAAIK,GAAMO,QAAQN,KAAa,EAAG,KAYtDO,KAAM,SAAcR,EAAMS,EAASC,YAATD,IAAAA,EAAK,IAC9B,IAAIE,GAAOhB,EAAIK,IAAS,IAAIY,QAAQC,IAAI,SAAUZ,GAAW,OAAOA,EAAQa,MAAMJ,EAASD,KACvFM,GAAOpB,EAAI,MAAQ,IAAIiB,QAAQC,IAAI,SAAUZ,GAAW,OAAOA,EAAQa,MAAMJ,YAAaD,GAAMT,OACpG,gBAAWW,EAAQI,IAUpBC,UAAW,SAAmBhB,EAAMS,EAASC,GAC5C,gBADmCD,IAAAA,EAAK,IACjCQ,QAAQtB,IAAIG,EAAEU,KAAKR,EAAMS,EAAMC,MAIxC,OAAOZ,ECpDR,IAAIoB,EAAQxB,EAAM,IAGbE,OAAOuB,UACVvB,OAAOuB,QAAU,SAAUC,GAIzB,IAHA,IAAIC,EAAWzB,OAAO0B,KAAKF,GACzBG,EAAIF,EAAShB,OACbmB,EAAW,IAAIC,MAAMF,GAChBA,KAAKC,EAASD,GAAK,CAACF,EAASE,GAAIH,EAAIC,EAASE,KAErD,OAAOC,IAKX,IAAMxB,EAAO,SAAC0B,GACV,MAAO,GAAGC,SAASC,KAAKF,GAAGd,MAAM,GAAI,GAAGiB,eASxCC,EAAS,SAACC,GACV,MAAsB,UAAlB/B,EAAK+B,IACE,YAAaA,GAAY,UAAWA,GAM/CC,EAAc,SAACD,GACf,MAAsB,UAAlB/B,EAAK+B,IAED,OAAQA,GACR,UAAWA,GACX,UAAWA,GAOnBE,EAAQ,SAACF,GACT,MAAsB,UAAlB/B,EAAK+B,IACEA,GAAYG,UAM3BtC,OAAOuC,OAAOjB,EAAO,CACnBlB,KAAAA,EACA8B,OAAAA,EACAE,YAAAA,EACAC,MAAAA,EACAG,QAtCY,WACV,IAAIC,EAAWC,kBACf,OAAOD,EAASA,EAAShC,OAAS,IAqCpCX,MAAAA,IAIF,IAAI6C,EAAa,CACfC,IAAI,CAAC,WAAW,SAAS,SAAS,UAAU,qBAC5CC,KAAK,CAAC,SAAS,SAAS,SAAU,UAAW,SAAU,WAAY,eAAgB,oBAAqB,gBAAiB,qBACzHC,UAAU,CAAC,SAAU,sBAAuB,WAAY,YAAa,eAInEC,EAAS,SAAS3C,EAAM4C,GAC1B1B,EAAMV,KAAQR,UAAa,CAAC4C,IAC5BL,EAAWvC,GAAM6C,QAAQ,SAASC,GAChC,IAAIC,EAAKH,EAAOE,IAAc,aAG9BF,EAAOE,wBACgD1C,YAAW4C,4BAA1D9B,EAAMF,UAAahB,MAAQ8C,yDAC3BC,EAAGjC,mDACHI,EAAMF,UAAahB,MAAQ8C,wCAHnC,sCAMF5B,EAAMV,KAAQR,YAAe,CAAC4C,KAIhC1B,EAAMnB,GAAG,4BAA6B,WACpCiD,KAAKC,MAAMC,MAAQF,KAAKC,MAAMC,OAAS,IAAIC,IAC3CH,KAAKC,MAAMC,MAAME,IAAIJ,QAEvB9B,EAAMnB,GAAG,8BAA+B,WACtCiD,KAAKC,MAAMC,MAAQF,KAAKC,MAAMC,OAAS,IAAIC,IAC3CH,KAAKC,MAAMC,MAAMG,OAAOL,QAG1B9B,EAAMnB,GAAG,qBAAsB,sBAC7BuD,WAAW,WACTC,EAAKC,SAAU,GACd,MAGLtC,EAAMnB,GAAG,oBAAqB,WACzBiD,KAAKQ,SACNR,KAAKS,WAMT,IAAIC,EAAOlB,IACPmB,EAAQlB,KACRmB,EAAalB,UACjBF,IAAM,SAASI,GAEb,OADAD,EAAO,MAAOC,GACPc,EAAKd,IAEdJ,IAAIkB,KAAOA,EACXlB,IAAIP,MAAQA,EACZQ,KAAO,SAASG,GAEd,OADAD,EAAO,OAAQC,GACRe,EAAMf,IAEfH,KAAKkB,MAAQA,EACblB,KAAKX,OAASA,EACdY,UAAY,SAASE,GAEnB,OADAD,EAAO,YAAaC,GACbgB,EAAWhB,IAEpBF,UAAUkB,WAAaA,EACvBlB,UAAUV,YAAcA,EAKxB,IAAI6B,EAAU,IAAIV,mNAElBjC,EAAM4C,IAAM,SAASC,EAAQC,GAC3BD,EAAOC,QAAUA,EACjBH,EAAQT,IAAIW,IAEZE,EADoBF,EAAOG,KAAKhD,EAAZ6C,CAAmB7C,EAAO8C,GAAtCC,YAGV/C,EAAM2C,QAAUA,EAChB3C,EAAMqB,WAAaA,EClJnB,IAAM4B,EAAY,iBACZC,EAAa,kBAYnB,SAASC,EAASC,GAChB,IAAMtE,EALR,SAAiBoB,GACf,OAAOxB,OAAO2E,UAAU5C,SAASC,KAAKR,GAIzBoD,CAAQF,GACrB,GAAItE,IAASoE,EAAY,CACvB,IAAMhD,EAAM,GAEZ,OADAxB,OAAO0B,KAAKgD,GAAMzB,QAAQ,SAAA4B,UAAOrD,EAAIqD,GAAOJ,EAASC,EAAKG,MACnDrD,EAET,GAAIpB,IAASmE,EAAW,CACtB,IAAMO,EAAM,GAEZ,OADAJ,EAAKzB,QAAQ,SAAC8B,EAAMC,UAAUF,EAAIE,GAASP,EAASM,KAC7CD,EAET,OAAOJ,EAKT,SAAwBO,EAAKC,EAASC,GAElC,IAAMC,EAAS,GAGf,OAKJ,SAASC,EAASH,EAASC,GACvB,GAAID,IAAYC,EAAhB,CACA,IAAMG,EAAkBlF,EAAK8E,GACvBK,EAAcnF,EAAK+E,GACzB,GAAIG,GAAmBd,GAAce,GAAef,EAE5C,IAAK,IAAIK,KAAOM,EAAK,CACjB,IAAMK,EAAeN,EAAQL,QACRY,IAAjBD,EACAN,EAAQL,GAAO,KAEfQ,EAASG,EAAcL,EAAIN,SAIhCS,GAAmBf,GAAagB,GAAehB,GAClDW,EAAQzE,QAAU0E,EAAI1E,QACtB0E,EAAIlC,QAAQ,SAAC8B,EAAMC,GACfK,EAASH,EAAQF,GAAQD,MAzBrCM,CAFAH,EAAUT,EAASS,GAEDC,GA+BtB,SAASO,EAAMR,EAASC,EAAKQ,EAAMP,GAC/B,GAAIF,IAAYC,EAAhB,CACA,IAAMG,EAAkBlF,EAAK8E,GACvBK,EAAcnF,EAAK+E,GACzB,GAAIG,GAAmBd,EACnB,GAAIe,GAAef,GAAcxE,OAAO0B,KAAKwD,GAASzE,OAAST,OAAO0B,KAAKyD,GAAK1E,OAC5EmF,EAAUR,EAAQO,EAAMT,OACrB,gBACML,GACL,IAAMW,EAAeN,EAAQL,GACvBgB,EAAWV,EAAIN,GACfiB,EAAc1F,EAAKoF,GACnBO,EAAU3F,EAAKyF,GACrB,GAAIC,GAAevB,GAAauB,GAAetB,EACvCgB,GAAgBL,EAAIN,IACpBe,EAAUR,GAAiB,IAARO,EAAa,GAAKA,EAAO,KAAOd,EAAKW,WAErDM,GAAevB,EAClBwB,GAAWxB,GAGPiB,EAAa/E,OAASoF,EAASpF,OAFnCmF,EAAUR,GAAiB,IAARO,EAAa,GAAKA,EAAO,KAAOd,EAAKW,GAKpDA,EAAavC,QAAQ,SAAC8B,EAAMC,GACxBU,EAAMX,EAAMc,EAASb,IAAiB,IAARW,EAAa,GAAKA,EAAO,KAAOd,EAAM,IAAMG,EAAQ,IAAKI,aAI5FU,GAAetB,EACtB,GAAIuB,GAAWvB,GAAcxE,OAAO0B,KAAK8D,GAAc/E,OAAST,OAAO0B,KAAKmE,GAAUpF,OAClFmF,EAAUR,GAAiB,IAARO,EAAa,GAAKA,EAAO,KAAOd,EAAKW,QAExD,IAAK,IAAIQ,KAAUR,EACfE,EAAMF,EAAaQ,GAASH,EAASG,IAAkB,IAARL,EAAa,GAAKA,EAAO,KAAOd,EAAM,IAAMmB,EAAQZ,IA1BnH,IAAK,IAAIP,KAAOK,IAAPL,QAgCNS,GAAmBf,EACtBgB,GAAehB,GAGXW,EAAQzE,OAAS0E,EAAI1E,OAFzBmF,EAAUR,EAAQO,EAAMT,GAKpBA,EAAQjC,QAAQ,SAAC8B,EAAMC,GACnBU,EAAMX,EAAMI,EAAIH,GAAQW,EAAO,IAAMX,EAAQ,IAAKI,KAK9DQ,EAAUR,EAAQO,EAAMT,IAnF5BQ,CAAMR,EAASC,EAAK,GAAIC,GACjBA,EAsFX,SAASQ,EAAUR,EAAQa,EAAGC,GAvHT,qBAwHb9F,EAAK8F,KACLd,EAAOa,GAAKC,GAIpB,SAAS9F,EAAKoB,GACV,OAAOxB,OAAO2E,UAAU5C,SAASC,KAAKR,GA1F1CyD,EAAKR,SAAWA,EClChBnD,EAAM4C,aCCkB5C,EAAO8C,GAI/B,IAAMK,EAAWQ,EAAKR,SAEd3E,EAAqCwB,EAArCxB,MAAOM,EAA8BkB,EAA9BlB,KAAMgC,EAAwBd,EAAxBc,YAAaF,EAAWZ,EAAXY,OAG5BiE,EAAmB,SAAAF,UAAGA,EAAEG,QAAQ,OAAO,KAkDvCC,EAAa,IAAI9C,IAGjB+C,aACJ,WAAYC,EAAoB7B,EAAWN,GAgBzC,YAhBUmC,IAAAA,EAAU,mBAAU7B,IAAAA,EAAO,aAAIN,IAAAA,EAAU,SA4CrDoC,aAAeA,EA1CbpD,KAAKqD,SAAW/B,EAEhB1E,OAAOuC,OAAOa,KAAMtD,EAAMsD,KAAKsD,QAAU,KAEzCtD,KAAKgB,QAAUpE,OAAOuC,OAAO,CAAC0C,MAAK,GAAQb,GAC3ChB,KAAKmD,UAAYA,EAEjBnD,KAAKuD,eAGLvD,KAAKwD,MAAQnC,EAASrB,KAAKqD,UAIvB5E,MAAMgF,KAAKR,GAAYS,KAAK,SAAAC,UAAOA,EAAMR,WAAaA,IAMxD,UAAUS,uBAAuBT,GAHjCF,EAAW7C,IAAIJ,MAlFkB,6BA6FrC6D,QAAA,SAAQC,EAAQC,cACK,UAAhB/G,EAAK8G,KAIRlH,OAAOuB,QAAQ2F,GAAQjG,IAAI,SAAAmG,IApFb,SAAZC,EAAsB3C,EAAMiB,EAAM2B,GACpC,IAAIC,EAAI1F,MAAM2F,QAAQ7B,GAAQA,EAAOA,EAAK8B,MAAM,SAChD,GAAI9B,GAAQ4B,EAAE9G,OAAS,EAAG,CACtB,IAAIwF,EAAIE,EAAiBoB,EAAEG,SAE3B,OAAOL,EADP3C,EAAOA,EAAKuB,KAAOvB,EAAKuB,GAAKsB,EAAE,KAAOpB,EAAiBoB,EAAE,IAAM,GAAK,IAC7CA,EAAGD,GAG1B,OADA5C,EAAKyB,EAAiBoB,EAAE,KAAOD,EACxB5C,EA6EP2C,CAAUM,EAAKlB,SAAUW,EAAO,GAAIA,EAAO,MAG/ChE,KAAKwD,MAAQnC,EAASrB,KAAKqD,UAE3BrD,KAAKxC,KAAK,SAAU,CAACsG,GAAS9D,MAC9BA,KAAK8D,OAAOC,OAMdR,aAAA,sBACMiB,EAAOxE,KACRA,KAAKgB,QAAQyD,UACd7H,OAAOuB,QAAQ6B,KAAKgB,QAAQyD,UAAU5G,IAAI,SAAA6G,OACjCnC,EAAoBmC,KAAdC,EAAcD,KAEJ,YAApB1H,EAAK2H,KA9EE,SAAUrD,EAAMiB,EAAMqC,YAAAA,IAAAA,EAAO,IAC3C,IACInD,EAAKrD,EADL+F,EAAI1F,MAAM2F,QAAQ7B,GAAQA,EAAOA,EAAK8B,MAAM,SAYhD,GATGF,EAAE9G,OAAO,GACRoE,EAAM0C,EAAE7G,QAAQ,GAAG,GACnBc,EAnBU,SAAZyG,EAAsBvD,EAAMiB,GAChC,IAAI4B,EAAI1F,MAAM2F,QAAQ7B,GAAQA,EAAOA,EAAK8B,MAAM,SAChD,GAAI9B,GAAQ4B,EAAE9G,OAAQ,CAClB,IAAIwF,EAAIE,EAAiBoB,EAAEG,SAC3B,GAAmB,iBAARhD,KAAsBuB,KAAKvB,GAClC,OAEJ,OAAOuD,EAAUvD,EAAKuB,GAAIsB,GAE1B,OAAO7C,EAUCuD,CAAUvD,EAAM6C,KAEtB1C,EAAM0C,EAAE,GACR/F,EAAMkD,GAEVG,EAAMsB,EAAiBtB,GAEN,iBAAPrD,EACN,OAAOxB,OAAOkI,eAAe1G,EAAKqD,EAAKmD,GAiEjCG,CAAUC,EAAK3B,SAAUd,EAAM,CACjC0C,YAAY,EACZC,eACEC,QAAQC,KAAK,gBAEfC,eACE,OAAOV,EAAWzD,KAAKsD,EAAKnB,SAArBsB,OAGTQ,QAAQC,WAAWJ,EAAK7B,sBAAqBZ,kCAQvDuB,OAAA,SAAOC,uBAAAA,IAAAA,EAAW,cAChB,IAAIuB,EAAOpH,EAAMkB,UACbkC,EAAOtB,KAAKsB,KAChB,GAAGgE,EAAK,OAEFxB,UACD9D,KAAKmD,WAAa7B,KAIlBtB,KAAKgB,QAAQa,OACdiC,EAASyB,EAAUjE,EAAMtB,KAAKmD,UAAWmC,IAG3C,IAAIE,EAAiB,CAAEpC,EAAalC,KAAKoE,EAAlBlC,CAAwBU,IAgB/C,OAdGwB,EAAKpF,OACNoF,EAAKpF,MAAML,QAAQ,SAAA4F,GACdA,EAAIC,SAAWD,EAAIC,QAAQC,SAASpF,KAGlCA,EAAKS,QAAQa,OACdiC,EAASyB,EAAUjE,EAAMf,EAAK4C,UAAWsC,IAG3CD,EAAetI,KAAMkG,EAAalC,KAAKuE,EAAlBrC,CAAuBU,OAK3C7F,QAAQtB,IAAI6I,GAAgBI,KAAK,WAAsB,OAAhB7B,EAASzC,GAAcA,IAEvE,OAAOrD,QAAQ4H,QAAQvE,MAGzBwE,MAAA,sBACMR,EAAOpH,EAAMkB,UACb2G,EAAM,GAWV,OAVGT,IACDS,EAAI7I,KAAKoI,EAAKU,OACXV,EAAKpF,OACNoF,EAAKpF,MAAML,QAAQ,SAAA4F,GACdA,EAAIC,SAAWD,EAAIC,QAAQC,SAASM,IACrCF,EAAI7I,KAAKuI,EAAIS,OAKdH,kCA7FP,YAAYvC,oMAkGZJ,EAAe,SAAU9B,cACzB,GAAItC,EAAYgB,OAASlB,EAAOkB,OAASmG,EAAQnG,MAC7C,WAAW/B,QAAQ,SAACmI,GAChBC,EAAKxC,QAAQvC,EAAM,SAACA,GAChB8E,EAAE9E,QAOdiE,EAAY,SAAUjE,EAAM6B,EAAWpE,GAEzC,IAAIuH,EAAczE,EAAKP,EAAMvC,EAASuC,KAAK6B,IAEvCoD,EAAuB,GAM3B,OAJA3J,OAAOuB,QAAQmI,GAAazG,QAAQ,SAAA2G,GAClCD,EAAwBpD,MAAaqD,EAAW,IAAQA,EAAW,KAG9DD,GAILJ,EAAU,SAACpH,GACb,SAAGA,GAAYA,aAAoBmE,IAQnC,MAAO,CAELjC,mBAGEiC,EAAMiD,QAAUA,EAGhBjI,EAAMnB,GAAG,qBAAsB,WAC7BkG,EAAWpD,QAAQ,SAAA8D,GACjBA,EAAMG,aAIV5F,EAAMnB,GAAG,qBAAsB,WAC7BkG,EAAWpD,QAAQ,SAAA8D,GACjBA,EAAMG,aAMV5F,EAAMnB,GAAG,iBAAkB,SAAS6C,GAClCA,EAAO0B,KAAO1B,EAAO0B,MAAQ,GAC7B1B,EAAO6G,OAAS7G,EAAO6G,QAAU,GACjC7G,EAAO8G,QAAU9G,EAAO8G,SAAW,GACnC9G,EAAO8G,QAAQhB,QAAU9F,EAAO6G,OAChC7G,EAAO8G,QAAQhB,QAAQ7F,QAAQ,SAAA8D,GAC7B/D,EAAO0B,KAAKqC,EAAMR,gBAAiBQ,EAAMrC,QAI3C1B,EAAO8G,QAAQtD,aAAeA,IAIhClF,EAAMnB,GAAG,YAAa,SAAS6C,GAC7BA,EAAO0B,KAAO1B,EAAO0B,MAAQ,GAC7B2B,EAAWpD,QAAQ,SAAA8D,GACjB/D,EAAO0B,KAAKqC,EAAMR,gBAAiBQ,EAAMrC,QAI3C1B,EAAOwD,aAAeA,IAIxBxG,OAAOuC,OAAOjB,EAAO,CACnBgF,MAAAA,EACAE,aAAAA,EACA+C,QAAAA,QD/QRjI,EAAM4C,aEJkB5C,EAAO8C,GAS/B,IAoBI2F,EAAgB,SAACvI,GACnB,OAAQxB,OAAO0B,KAAKF,GAAO,IAAIf,QAG/B,MAAO,CACL4D,mBAEE/C,EAAMqB,WAAWG,UAAUxC,KAAK,kBAGhCgB,EAAMnB,GAAG,iBAAkB,SAAS6C,GAClCA,EAAO8G,QAAQE,WAAahH,IAG9B1B,EAAMnB,GAAG,6BAA8B,SAAS8J,EAAWC,cAErDC,EAAYlF,EAAK7B,KAAKgH,MAAOH,GAEjC,IAAKF,EAAcI,GAAY,CAG7B,IACIE,EAAajH,KAAK4G,WAAWK,YAAc,IAD1BjH,KAAK4G,WAAWM,gBAAkB,cAGxChG,KAAKlB,KAApBkH,CAA0BH,EAAWF,GANR,eASlBtE,GACT,GAAI0E,EAAWE,eAAe5E,GAAO,CACnC,IAAMtF,EAAUgK,EAAW1E,GAGvB6E,EAAQ,GACZxK,OAAO0B,KAAKyI,GAAWlJ,IAAI,SAAC4D,IArDtB,SAAC4F,EAAWC,GAC9B,YAD8BA,IAAAA,EAAW,IACzB,KAAZA,EACF,SAEF,IAAIC,EAAO,aACPC,EAAc,MACdC,EAAeJ,EAAUrE,QAAQwE,EAAa,IAAInD,MAAMkD,GACxDG,EAAcJ,EAAStE,QAAQwE,EAAa,IAAInD,MAAMkD,GAE1D,GAAIG,EAAYrK,OAASoK,EAAapK,OACpC,SAEF,IAAK,IAAIuE,EAAQ,EAAGA,EAAQ8F,EAAYrK,OAAQuE,IAC9C,GAAI8F,EAAY9F,IAAU6F,EAAa7F,GACrC,SAGJ,UAqCkB+F,CAAclG,EAAKc,KACrB6E,EAAM3F,GAAOsF,EAAUtF,MAItBkF,EAAcS,IACjBnK,EAAQiE,KAAKqD,EAAbtH,CAAmBmK,EAAOP,KAbhC,IAAK,IAAMtE,KAAQ0E,IAAR1E"}