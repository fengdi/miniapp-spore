{"version":3,"file":"miniapp-spore.js","sources":["../src/event.js","../src/core.js","../src/diff.js","../src/index.js","../src/store.plugin.js","../src/props.plugin.js"],"sourcesContent":["function Event(all) {\r\n\tall = all || Object.create(null);\r\n\r\n\tconst e = {\r\n\t\t/**\r\n\t\t * 注册\r\n\t\t *\r\n\t\t * @param  {String} type\t事件名 `\"*\"` 代表全部\r\n\t\t * @param  {Function} handler 方法\r\n\t\t */\r\n\t\ton: function on(type, handler) {\r\n\t\t\t(all[type] || (all[type] = [])).push(handler);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 移出\r\n\t\t *\r\n\t\t * @param  {String} type\t事件名 `\"*\"` 代表全部\r\n\t\t * @param  {Function} handler 移出的方法\r\n\t\t */\r\n\t\toff: function off(type, handler) {\r\n\t\t\tif (all[type]) {\r\n\t\t\t\tif(arguments.length == 1){\r\n\t\t\t\t\tall[type] = []\r\n\t\t\t\t}else{\r\n\t\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 触发\r\n\t\t *\r\n\t\t * @param {String} type  触发事件名\r\n\t\t * @param {Any} [args]  额外进入方法的参数\r\n\t\t * @param {object} [context]  this指向的上下文\r\n\t\t */\r\n\t\temit: function emit(type, args=[], context) {\r\n\t\t\tlet tps = (all[type] || []).slice().map(function (handler) { return handler.apply(context, args); });\r\n\t\t\tlet aps = (all['*'] || []).slice().map(function (handler) { return handler.apply(context, [...args, type]); });\r\n\t\t\treturn [...tps, ...aps];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * 同步触发\r\n\t\t *\r\n\t\t * @param {String} type  触发事件名\r\n\t\t * @param {Any} [args]  额外进入方法的参数\r\n\t\t * @param {object} [context]  this指向的上下文\r\n\t\t */\r\n\t\tasyncEmit: function asyncEmit(type, args=[], context) {\r\n\t\t\treturn Promise.all(e.emit(type, args, context));\r\n\t\t},\r\n\t};\r\n\r\n\treturn e;\r\n}\r\n\r\nexport default Event;","\r\nimport Event from \"./event\";\r\n\r\nimport { version } from \"../package.json\";\r\n\r\nlet spore = Event({});\r\n\r\n//polyfill\r\nif (!Object.entries){\r\n  Object.entries = function (obj) {\r\n    var ownProps = Object.keys(obj),\r\n      i = ownProps.length,\r\n      resArray = new Array(i); // preallocate the Array\r\n    while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];\r\n\r\n    return resArray;\r\n  };\r\n}\r\n\r\n// 类型检测\r\nconst type = (t) => {\r\n    return {}.toString.call(t).slice(8, -1).toLowerCase();\r\n};\r\n\r\n// 获取当前页面（注意某些情况可能为null）\r\nlet getPage = ()=> {\r\n    let curPages = getCurrentPages();\r\n    return curPages[curPages.length - 1];\r\n}\r\n// 是否为页面\r\nlet isPage = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return \"$viewId\" in instance && \"route\" in instance;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n// 是否为组件\r\nlet isComponent = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return (\r\n            \"is\" in instance &&\r\n            \"$page\" in instance &&\r\n            \"props\" in instance\r\n        );\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n// 是否为App\r\nlet isApp = (instance) => {\r\n    if (type(instance) == \"object\") {\r\n        return instance == getApp();\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nObject.assign(spore, {\r\n  type,\r\n  isPage,\r\n  isComponent,\r\n  isApp,\r\n  getPage,\r\n  Event\r\n})\r\n\r\n// 生命周期\r\nlet lifeCycles = {\r\n  App:['onLaunch','onShow','onHide','onError','onShareAppMessage'],\r\n  Page:['onLoad','onShow','onBack', 'onReady', 'onHide', 'onUnload', \r\n  'onTitleClick', 'onPullDownRefresh', 'onReachBottom', 'onShareAppMessage',\r\n  'onOptionMenuClick', 'onPullIntercept', 'onTabItemTap', 'onPageScroll'],\r\n  Component:['onInit', 'deriveDataFromProps', 'didMount', 'didUpdate', 'didUnmount']\r\n};\r\n\r\n// 事件监听\r\nlet listen = function(type, config){\r\n  spore.emit(`${type}.init`, [config])\r\n  lifeCycles[type].forEach(function(lifeCycle){\r\n    let origin = config[lifeCycle];\r\n    let fn = origin || function(){};\r\n\r\n    // lifeCycle AOP\r\n    config[lifeCycle] = async function(){\r\n      await spore.asyncEmit(`${type}.${lifeCycle}:before`, arguments, this)\r\n      await fn.apply(this, arguments);\r\n      await spore.asyncEmit(`${type}.${lifeCycle}:after`, arguments, this)\r\n    }\r\n    // 原定义的生命周期方法存入到现有生命周期的origin上方便获取\r\n    config[lifeCycle].origin = origin;\r\n  })\r\n  spore.emit(`${type}.inited`, [config])\r\n};\r\n\r\n// 页面组件实例存入 page._coms\r\nspore.on('Component.didMount:before', function(){\r\n  this.$page._coms = this.$page._coms || new Set();\r\n  this.$page._coms.add(this);\r\n})\r\nspore.on('Component.didUnmount:before', function(){\r\n  this.$page._coms = this.$page._coms || new Set();\r\n  this.$page._coms.delete(this);\r\n})\r\n// 已加载\r\nspore.on('Page.onLoad:before', function(){\r\n  setTimeout(() => {\r\n    this._loaded = true;\r\n  }, 10);\r\n})\r\n// 页面返回生命周期\r\nspore.on('Page.onShow:after', function(){\r\n  if(this._loaded){\r\n    this.onBack();\r\n  }\r\n})\r\n\r\n\r\n// Hooks\r\nlet _App = App;\r\nlet _Page = Page;\r\nlet _Component = Component;\r\nApp = function(config){\r\n  listen('App', config);\r\n  return _App(config);\r\n};\r\nApp._App = _App;\r\nApp.isApp = isApp;\r\nPage = function(config){\r\n  listen('Page', config);\r\n  return _Page(config);\r\n};\r\nPage._Page = _Page;\r\nPage.isPage = isPage;\r\nComponent = function(config){\r\n  listen('Component', config);\r\n  return _Component(config);\r\n};\r\nComponent._Component = _Component;\r\nComponent.isComponent = isComponent;\r\n\r\n\r\n\r\n// 插件install\r\nlet plugins = new Set();\r\n\r\nspore.use = function(plugin, options){\r\n  plugin.options = options;\r\n  plugins.add(plugin)\r\n  const { install } = plugin.bind(spore)(spore, options)\r\n  install()\r\n};\r\nspore.plugins = plugins;\r\nspore.lifeCycles = lifeCycles;\r\n\r\n\r\nconsole && console.info(`miniapp-spore: v${version}`)\r\n\r\nexport default spore;","const ARRAYTYPE = '[object Array]'\r\nconst OBJECTTYPE = '[object Object]'\r\nconst FUNCTIONTYPE = '[object Function]'\r\n\r\n//thanks:\r\n//https://github.com/yisar/fard/blob/master/packages/fard/index.js\r\n//https://github.com/linjc/dd-store/blob/master/src/create.js\r\n//https://github.com/Tencent/westore/blob/master/packages/westore/utils/diff.js\r\n\r\nfunction type(obj) {\r\n    return Object.prototype.toString.call(obj)\r\n}\r\n\r\nfunction deepCopy(data) {\r\n  const typeStr = type(data)\r\n  if (typeStr === OBJECTTYPE) {\r\n    const obj = {}\r\n    Object.keys(data).forEach(key => obj[key] = deepCopy(data[key]))\r\n    return obj\r\n  }\r\n  if (typeStr === ARRAYTYPE) {\r\n    const arr = []\r\n    data.forEach((item, index) => arr[index] = deepCopy(item))\r\n    return arr\r\n  }\r\n  return data\r\n}\r\n\r\nexport default function diff(current, pre) {\r\n    const result = {}\r\n    syncKeys(current, pre)\r\n    _diff(current, pre, '', result)\r\n    return result\r\n}\r\n\r\ndiff.deepCopy = deepCopy;\r\n\r\nfunction syncKeys(current, pre) {\r\n    if (current === pre) return\r\n    const rootCurrentType = type(current)\r\n    const rootPreType = type(pre)\r\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\r\n        //if(Object.keys(current).length >= Object.keys(pre).length){\r\n            for (let key in pre) {\r\n                const currentValue = current[key]\r\n                if (currentValue === undefined) {\r\n                    current[key] = null\r\n                } else {\r\n                    syncKeys(currentValue, pre[key])\r\n                }\r\n            }\r\n        //}\r\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\r\n        if (current.length >= pre.length) {\r\n            pre.forEach((item, index) => {\r\n                syncKeys(current[index], item)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction _diff(current, pre, path, result) {\r\n    if (current === pre) return\r\n    const rootCurrentType = type(current)\r\n    const rootPreType = type(pre)\r\n    if (rootCurrentType == OBJECTTYPE) {\r\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\r\n            setResult(result, path, current)\r\n        } else {\r\n            for (let key in current) {\r\n                const currentValue = current[key]\r\n                const preValue = pre[key]\r\n                const currentType = type(currentValue)\r\n                const preType = type(preValue)\r\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\r\n                    if (currentValue != pre[key]) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    }\r\n                } else if (currentType == ARRAYTYPE) {\r\n                    if (preType != ARRAYTYPE) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    } else {\r\n                        if (currentValue.length < preValue.length) {\r\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                        } else {\r\n                            currentValue.forEach((item, index) => {\r\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result)\r\n                            })\r\n                        }\r\n                    }\r\n                } else if (currentType == OBJECTTYPE) {\r\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\r\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue)\r\n                    } else {\r\n                        for (let subKey in currentValue) {\r\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else if (rootCurrentType == ARRAYTYPE) {\r\n        if (rootPreType != ARRAYTYPE) {\r\n            setResult(result, path, current)\r\n        } else {\r\n            if (current.length < pre.length) {\r\n                setResult(result, path, current)\r\n            } else {\r\n                current.forEach((item, index) => {\r\n                    _diff(item, pre[index], path + '[' + index + ']', result)\r\n                })\r\n            }\r\n        }\r\n    } else {\r\n        setResult(result, path, current)\r\n    }\r\n}\r\n\r\nfunction setResult(result, k, v) {\r\n    if (type(v) != FUNCTIONTYPE) {\r\n        result[k] = v\r\n    }\r\n}\r\n\r\n","import spore from \"./core\";\r\nimport storePlugin from \"./store.plugin\";\r\nimport propsPlugin from \"./props.plugin\";\r\n\r\nspore.use(storePlugin);\r\n\r\nspore.use(propsPlugin);\r\n\r\n\r\nexport default spore;","import diff from \"./diff\";\r\n\r\n\r\n\r\n\r\nexport default function(spore, options){\r\n\r\n\r\n// 深度复制\r\nconst deepCopy = diff.deepCopy;\r\n\r\nconst { Event, type, isComponent, isPage } = spore;\r\n\r\n// 去除右侧方括号]\r\nconst trimRightBracket = k=>k.replace(/\\]$/g,'');\r\n\r\n\r\n\r\n// 路径设对象值\r\nconst setByPath = function (data, path, value) {\r\n    let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n    if (path && p.length > 1) {\r\n        let k = trimRightBracket(p.shift());\r\n        data = data[k] || (data[k] = p[0] !== trimRightBracket(p[0]) ? [] : {});\r\n        return setByPath(data, p, value);\r\n    } else {\r\n        data[trimRightBracket(p[0])] = value;\r\n        return data;\r\n    }\r\n};\r\n// 路径取对象值\r\nconst getByPath = function (data, path) {\r\n  let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n  if (path && p.length) {\r\n      let k = trimRightBracket(p.shift());\r\n      if (typeof data != \"object\" || !(k in data)) {\r\n          return;\r\n      }\r\n      return getByPath(data[k], p);\r\n  } else {\r\n      return data;\r\n  }\r\n};\r\n// 路径定义对象值\r\nconst defByPath = function (data, path, define={}) {\r\n    let p = Array.isArray(path) ? path : path.split(/\\.|\\[/);\r\n    let key, obj;\r\n\r\n    if(p.length>1){\r\n        key = p.splice(-1)[0];\r\n        obj = getByPath(data, p);\r\n    }else{\r\n        key = p[0]\r\n        obj = data;\r\n    }\r\n    key = trimRightBracket(key);\r\n\r\n    if(typeof obj == 'object'){\r\n        return Object.defineProperty(obj, key, define);\r\n    }\r\n};\r\n\r\n\r\n// 全局存储对象列表\r\nconst storesList = new Set();\r\n\r\n// 存储对象\r\nclass Store{\r\n  constructor(namespace='$store', data = {}, options = {}){\r\n\r\n    // 验证命名空间合法性\r\n    if(!/^[_\\$a-zA-Z][_\\$a-zA-Z0-9]*$/.test(namespace)){\r\n      throw new Error(`Store命名空间${namespace}定义不合法，规则与js变量名一致`)\r\n      return;\r\n    }\r\n    this.namespace = namespace;\r\n\r\n    // 相同命名空间要报错\r\n    if(!Array.from(storesList).find(store=>store.namespace == namespace)){\r\n\r\n      //加入列表方便后续管理\r\n      storesList.add(this);\r\n\r\n    }else{\r\n      throw new Error(`Store不能同时使用同一个命名空间:${namespace}`)\r\n    }\r\n\r\n\r\n    // 融入事件方法 on emit 等\r\n    Object.assign(this, Event(this._events = {}));\r\n\r\n    this.options = Object.assign({diff:false}, options);\r\n\r\n    this._createDefineData(data);\r\n\r\n  }\r\n  \r\n  //设置数据\r\n  setData(update, callback){\r\n    if(type(update) != 'object'){\r\n        return\r\n    }\r\n    //更新数据根据路径进行设置\r\n    Object.entries(update).map(record=>{\r\n        setByPath(this._defineData, record[0], record[1])\r\n    })\r\n\r\n    this._data = deepCopy(this._defineData);\r\n\r\n    this.emit('setData', [update], this)\r\n    this.update(callback)\r\n  }\r\n  // 异步设置data，返回Promise\r\n  asyncSetData = asyncSetData\r\n  // 修改数组\r\n  $spliceData(update, callback){\r\n    if(type(update) != 'object'){\r\n      return\r\n    }\r\n    Object.entries(update).map(record=>{\r\n      const [key, value] = record;\r\n      let arr = getByPath(this._defineData, key);\r\n\r\n      if(Array.isArray(arr)){\r\n        [].splice.apply(arr, value)\r\n      }\r\n    })\r\n\r\n    this._data = deepCopy(this._defineData);\r\n\r\n    this.emit('$spliceData', [update], this)\r\n    this.update(callback)\r\n  }\r\n  // 清除数据二级以下的计算属性可能会被覆盖\r\n  clear(callback){\r\n    Object.entries(this._defineData).map(record=>{\r\n      const [key, value] = record;\r\n      this._defineData[key] =  null;\r\n    })\r\n    this._data = deepCopy(this._defineData);\r\n    this.emit('clear', [], this)\r\n    this.update(callback)\r\n  }\r\n  _createDefineData(data){\r\n    //内部定义存储的data\r\n    this._defineData = data;\r\n    // 处理计算属性\r\n    this._setComputed();\r\n    //对外暴露的data\r\n    this._data = deepCopy(this._defineData);\r\n  }\r\n  // 不要直接访问 _data _defineData 字段 访问data，此字段应该只读\r\n  get data(){\r\n    return this._data;\r\n  }\r\n  //处理计算属性\r\n  _setComputed(){\r\n    let self = this;\r\n    if(this.options.computed){\r\n      Object.entries(this.options.computed).map(computedCof=>{\r\n        const [path, computedFn] = computedCof;\r\n\r\n        if(type(computedFn) == 'function'){\r\n          // 将对应路径下的对象设置getter\r\n          if(!defByPath(this._defineData, path, {\r\n            enumerable: true,\r\n            set() {\r\n              console.warn('计算属性不支持重新赋值')\r\n            },\r\n            get(){\r\n              return computedFn.bind(self._defineData)();\r\n            }\r\n          })){\r\n            console.warn(`存储【${this.namespace}】无法定义计算属性${path}，因为在此路径下不是对象类型，无法定义属性。`)\r\n          };\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  //更新、强制更新\r\n  update(callback = ()=>{}){\r\n    let page = spore.getPage();\r\n    let data = this.data;\r\n    if(page){ \r\n\r\n      let update = {\r\n        [this.namespace] : data\r\n      };\r\n\r\n      // 页面diff更新\r\n      if(this.options.diff){\r\n        update = storeDiff(data, this.namespace, page)\r\n      }\r\n      // 页面更新\r\n      let updatePromises = [ asyncSetData.bind(page)(update) ]\r\n\r\n      if(page._coms){\r\n        page._coms.forEach(com=>{\r\n          if(com.$stores && com.$stores.includes(this)){\r\n\r\n            // 组件diff更新\r\n            if(this.options.diff){\r\n              update = storeDiff(data, this.namespace, com)\r\n            }\r\n            // 组件更新\r\n            updatePromises.push( asyncSetData.bind(com)(update) )\r\n          }\r\n        })\r\n      }\r\n\r\n      return Promise.all(updatePromises).then(()=>{ callback(data); return data;});\r\n    }\r\n    return Promise.resolve(data);\r\n  }\r\n  //返回哪些页面/组件在使用\r\n  where(){\r\n    let page = spore.getPage();\r\n    let res = [];\r\n    if(page){\r\n\r\n      // 页面route加入结果\r\n      res.push(page.route);\r\n      \r\n      if(page._coms){\r\n        page._coms.forEach(com=>{\r\n          if(com.$stores && com.$stores.includes(this)){\r\n\r\n            // 组件is加入结果\r\n            res.push(com.is);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n  // 销毁\r\n  destroy(clear){\r\n    storesList.delete(this);\r\n    this._data = {};\r\n    this._defineData = {};\r\n    if(clear){\r\n      this.clear();\r\n    }\r\n    // 成员方法全部置为报错的空方法\r\n    ['$spliceData','setData','clear',\r\n    'asyncSetData','_setComputed',\r\n    'update','where','destroy'].forEach(fnName=>{\r\n      this[fnName] = ()=>{throw new Error(`Store:[${this.namespace}]已销毁`)}\r\n    })\r\n    this.emit('destroy', [], this)\r\n  }\r\n}\r\n\r\n// 同步setData 支持页面/组件/Store\r\nlet asyncSetData = function (data) {\r\n    if (isComponent(this) || isPage(this) || isStore(this)) {\r\n        return new Promise((r) => {\r\n            this.setData(data, (data) => {\r\n                r(data);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// store存储data与对应页面/组件data下数据对比出差异\r\nlet storeDiff = function (data, namespace, instance){\r\n  \r\n  let diffUpdates = diff(data, instance.data[namespace]);\r\n  \r\n  let namespaceDiffUpdates = {};\r\n\r\n  Object.entries(diffUpdates).forEach(diffUpdate=>{\r\n    namespaceDiffUpdates[`${namespace}.${diffUpdate[0]}`] = diffUpdate[1];\r\n  })\r\n\r\n  return namespaceDiffUpdates;\r\n}\r\n\r\n// 是否为Store类的实例\r\nlet isStore = (instance) =>{\r\n  if(instance && instance instanceof Store){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n\r\n  return {\r\n\r\n    install(){\r\n\r\n      \r\n      Store.isStore = isStore;\r\n\r\n      // 页面返回时数据更新\r\n      spore.on('Page.onBack:before', function(){\r\n        storesList.forEach(store=>{\r\n          store.update()\r\n        })\r\n      })\r\n      // 页面加载时数据更新\r\n      spore.on('Page.onLoad:before', function(){\r\n        storesList.forEach(store=>{\r\n          store.update()\r\n        })\r\n      })\r\n\r\n\r\n      // 组件初始化嵌入数据\r\n      spore.on('Component.init', function(config){\r\n        config.data = config.data || {};\r\n        config.stores = config.stores || [];\r\n        config.methods = config.methods || {};\r\n        config.methods.$stores = config.stores; //$stores需要在组件方法内定义才能取到值\r\n        config.methods.$stores.forEach(store=>{\r\n          config.data[store.namespace] = {...store.data};\r\n        })\r\n\r\n        // 组件支持asyncSetData方法\r\n        config.methods.asyncSetData = asyncSetData;\r\n      })\r\n\r\n      // 组件挂载时数据更新\r\n      spore.on('Component.didMount:before', async function(){\r\n        await Promise.all(this.$stores.map(store=>{\r\n          let data = store.data;\r\n          let update = {\r\n            [store.namespace] : data\r\n          };\r\n          // 组件diff更新\r\n          if(store.options.diff){\r\n            update = storeDiff(data, store.namespace, this)\r\n          }\r\n          return this.asyncSetData(update)\r\n        }));\r\n      })\r\n\r\n      // 页面初始化嵌入数据\r\n      spore.on('Page.init', function(config){\r\n        config.data = config.data || {};\r\n        storesList.forEach(store=>{\r\n          config.data[store.namespace] = {...store.data};\r\n        })\r\n\r\n        // 页面支持asyncSetData方法\r\n        config.asyncSetData = asyncSetData;\r\n      })\r\n\r\n\r\n      Object.assign(spore, {\r\n        Store,\r\n        asyncSetData,\r\n        isStore\r\n      })\r\n\r\n\r\n    }\r\n\r\n  }\r\n}","import diff from \"./diff\";\r\n\r\nexport default function(spore, options){\r\n\r\n /**\r\n * 路径包含匹配\r\n *\r\n * @param  {String} referPath\t参考路径\r\n * @param  {String}  pathRule     匹配规则\r\n * @return {Boolean}  参考路径是否符合在匹配规则下\r\n */\r\nlet isPathContain = (referPath, pathRule = '') => {\r\n  if (pathRule == '*') {\r\n    return true\r\n  }\r\n  let pReg = /[\\.\\[\\]]+/g;\r\n  let bracketsReg = /\\]/g;\r\n  let referPathArr = referPath.replace(bracketsReg, '').split(pReg);\r\n  let pathRuleArr = pathRule.replace(bracketsReg, '').split(pReg);\r\n\r\n  if (pathRuleArr.length > referPathArr.length) {\r\n    return false;\r\n  }\r\n  for (let index = 0; index < pathRuleArr.length; index++) {\r\n    if (pathRuleArr[index] != referPathArr[index]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n//是否为空对象\r\nlet isEmptyObject = (obj)=>{\r\n  return !Object.keys(obj || {}).length;\r\n};\r\n\r\n  return {\r\n    install(){\r\n\r\n      spore.lifeCycles.Component.push('didPropsUpdate');\r\n\r\n      // 将配置存入方法的$$config$$，在实例化后可取\r\n      spore.on('Component.init', function(config){\r\n        config.methods.$$config$$ = config;\r\n      });\r\n      \r\n      spore.on('Component.didUpdate:before', function(prevProps, prevData){\r\n\r\n        let { didPropsUpdate, watchProps } = this.$$config$$;\r\n\r\n        // 如果didPropsUpdate和watchProps都没有配置，就不做处理\r\n        if(!didPropsUpdate.origin && (!watchProps || isEmptyObject(watchProps)) ){\r\n          return ;\r\n        }\r\n\r\n        let diffProps = diff(this.props, prevProps);\r\n\r\n         //不相等即diff为空对象时，触发didPropsUpdate 生命周期\r\n        if (!isEmptyObject(diffProps)) {\r\n\r\n          \r\n          didPropsUpdate = didPropsUpdate || function(){};\r\n          watchProps = watchProps || {};\r\n\r\n          //触发生命周期 didPropsUpdate\r\n          didPropsUpdate.bind(this)(diffProps, prevProps);\r\n\r\n          //配置的监听器\r\n          for (const path in watchProps) {\r\n            if (watchProps.hasOwnProperty(path)) {\r\n              const handler = watchProps[path];\r\n\r\n              //记录匹配\r\n              let match = {};\r\n              Object.keys(diffProps).map((key) => {\r\n                if (isPathContain(key, path)) { //当diff内的变化key包含配置的路径path（并且开头能对上）\r\n                  match[key] = diffProps[key];\r\n                }\r\n              })\r\n              //匹配上路径监听规则时\r\n              if (!isEmptyObject(match)) {\r\n                handler.bind(this)(match, prevProps)\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n}"],"names":["Event","all","Object","create","e","on","type","handler","push","off","arguments","length","splice","indexOf","emit","args","context","tps","slice","map","apply","aps","asyncEmit","Promise","spore","entries","obj","ownProps","keys","i","resArray","Array","t","toString","call","toLowerCase","isPage","instance","isComponent","isApp","getApp","assign","getPage","curPages","getCurrentPages","lifeCycles","App","Page","Component","listen","config","forEach","lifeCycle","origin","fn","this","$page","_coms","Set","add","delete","setTimeout","_this3","_loaded","onBack","_App","_Page","_Component","plugins","use","plugin","options","install","bind","console","info","ARRAYTYPE","OBJECTTYPE","prototype","diff","current","pre","result","syncKeys","rootCurrentType","rootPreType","key","currentValue","undefined","item","index","_diff","path","setResult","preValue","currentType","preType","subKey","k","v","deepCopy","data","typeStr","arr","trimRightBracket","replace","getByPath","p","isArray","split","shift","storesList","Store","namespace","asyncSetData","test","Error","from","find","store","_events","_createDefineData","setData","update","callback","record","setByPath","value","_this","_defineData","_data","$spliceData","_this2","clear","_setComputed","self","computed","computedCof","computedFn","define","defineProperty","defByPath","_this4","enumerable","set","warn","get","page","storeDiff","updatePromises","com","$stores","includes","_this5","then","resolve","where","res","route","_this6","is","destroy","fnName","_this7","isStore","r","_this8","diffUpdates","namespaceDiffUpdates","diffUpdate","stores","methods","_this10","isEmptyObject","$$config$$","prevProps","prevData","didPropsUpdate","watchProps","diffProps","props","hasOwnProperty","match","referPath","pathRule","pReg","bracketsReg","referPathArr","pathRuleArr","isPathContain"],"mappings":"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"}